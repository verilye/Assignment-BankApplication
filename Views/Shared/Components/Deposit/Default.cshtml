@model List<AccountViewModel>
@{
    ViewData["route"] = "/Home/Deposit";
}
<div class="container border p-4">
    <h3>Make a Deposit</h3>
    <form id="depositForm" method="post" >
        <div class="form-group">
            <label for="deposit-accountSelect" class="form-label">Select Account</label>
            <select class="form-control" id="deposit-accountSelect" required>
                <option type="number" value="" disabled selected>Select an account</option>
                @foreach (var item in Model)
                {
                    <option value=@item.Account.AccountNumber>@item.Account.AccountNumber</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="deposit-amount" class="form-label">Amount</label>
            <input type="number" step="0.01" class="form-control" id="deposit-amount" placeholder="Enter amount" required min="0.1">
        </div>
        <div class="form-group">
            <label for="deposit-comment" class="form-label">Comment</label>
            <textarea class="form-control" id="deposit-comment" placeholder="Enter comment here"></textarea>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Deposit</button>
        </div>
    </form>
</div>

<div class="modal fade" id="confirmDeposit" tabindex="10" aria-labelledby="confirmDepositLabel" aria-hidden="true"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDepositLabel">Confirm Transaction?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="submitDepositButton" type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById("depositForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        // Get form data
        const accountSelect = document.getElementById("deposit-accountSelect");
        const amountInput = document.getElementById("deposit-amount");
        const selectedAccount = accountSelect.options[accountSelect.selectedIndex].value;
        const amount = parseFloat(amountInput.value);
        const comment = document.getElementById("deposit-comment").value;

        // Create transaction object
        const transaction = {
            TransactionID: 0,
            TransactionType: 'D',
            AccountNumber: selectedAccount,
            DestinationAccountNumber: null,
            Amount: amount,
            Comment: comment,
            TransactionTimeUtc: new Date().toISOString(),
        };


        // Display ConfirmationWindow modal
        displayDepositModal(transaction);
    });


    function displayDepositModal(transaction) {
        const depositModal = new bootstrap.Modal(document.getElementById("confirmDeposit"));
        const modalBody = document.querySelector("#confirmDeposit .modal-body");

        // Populate modal content with transaction details
        modalBody.innerHTML = '';
        modalBody.innerHTML += ` <p>Transaction Type : ${transaction.TransactionType}</p>`;
        modalBody.innerHTML += ` <p>Account Number : ${transaction.AccountNumber}</p>`;
        modalBody.innerHTML += ` <p>DestinationAccountNumber : ${transaction.DestinationAccountNumber} </p>`;
        modalBody.innerHTML += ` <p>Amount : ${transaction.Amount}</p>`;
        modalBody.innerHTML += ` <p>Comment :${transaction.Comment}</p>`;
        modalBody.innerHTML += ` <p>TransactionTimeUtc : ${transaction.TransactionTimeUtc}</p>`;

        // Show the modal
        $('#confirmDeposit').modal('toggle');
    }

    document.getElementById("submitDepositButton").addEventListener("click", function () {

        const accountSelect = document.getElementById("deposit-accountSelect");
        const amountInput = document.getElementById("deposit-amount");
        const selectedAccount = accountSelect.options[accountSelect.selectedIndex].value;
        const amount = parseFloat(amountInput.value);
        const comment = document.getElementById("deposit-comment").value;

        // Create transaction object
        const transaction = {
            TransactionID: 0,
            TransactionType: 'D',
            AccountNumber: selectedAccount,
            DestinationAccountNumber: null,
            Amount: amount,
            Comment: comment,
            TransactionTimeUtc: new Date().toISOString(),
        };

        const route = '@ViewData["route"]';
        submitDeposit(transaction, route);

    });

    async function submitDeposit(transaction, route) {

        const formData = new FormData();

        for (const key in transaction) {
            if (transaction.hasOwnProperty(key)) {
                formData.append(key, transaction[key]);
            }
        }

        const response = await fetch(route, {
            method: "POST",
            body: formData,
        });

        if (response.redirected) {
            window.location.href = "/Home";
        }

    }

</script>

