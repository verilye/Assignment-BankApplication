@model List<AccountViewModel>
@{
    ViewData["route"] = "/Home/Deposit";
}

<h3>Make a Deposit</h3>
<form id="depositForm" method="post">
    <div class="form-group">
        <label for="accountSelect" class="form-label">Select Account</label>
        <select class="form-control" id="accountSelect" required>
            <option type="number" value="" disabled selected>Select an account</option>
            @foreach(var item in Model){
                <option value=@item.Account.AccountNumber>@item.Account.AccountNumber</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="amount" class="form-label">Amount</label>
        <input type="number" step = "0.01" class="form-control" id="amount" placeholder="Enter amount" required min="0.1">
    </div>
    <div class="form-group">
        <label for="comment" class="form-label">Comment</label>
        <textarea class="form-control" id="comment" placeholder="Enter comment here"></textarea>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-primary">Deposit</button>
    </div>
</form>

@await Component.InvokeAsync("ConfirmationWindow", new {route = "/Home/Deposit" })


<script>
    document.getElementById("depositForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        // Get form data
        const accountSelect = document.getElementById("accountSelect");
        const amountInput = document.getElementById("amount");
        const selectedAccount = accountSelect.options[accountSelect.selectedIndex].value;
        const amount = parseFloat(amountInput.value);
        const comment = document.getElementById("comment").value;

        // Create transaction object
        const transaction = {
            TransactionID: 0,
            TransactionType: 'D',
            AccountNumber: selectedAccount,
            DestinationAccountNumber: null,
            Amount: amount,
            Comment: comment,
            TransactionTimeUtc: new Date().toISOString(),
        };


        // Display ConfirmationWindow modal
        displayConfirmationModal(transaction);
    });


    function displayConfirmationModal(transaction) {
        const confirmationModal = new bootstrap.Modal(document.getElementById("confirmationWindow"));
        const modalBody = document.querySelector("#confirmationWindow .modal-body");

        // Populate modal content with transaction details
        modalBody.innerHTML = '';
        modalBody.innerHTML += ` <p>Transaction Type : ${transaction.TransactionType}</p>`;
        modalBody.innerHTML += ` <p>Account Number : ${transaction.AccountNumber}</p>`;
        modalBody.innerHTML += ` <p>DestinationAccountNumber : ${transaction.DestinationAccountNumber} </p>`;
        modalBody.innerHTML += ` <p>Amount : ${transaction.Amount}</p>`;
        modalBody.innerHTML += ` <p>Comment :${transaction.Comment}</p>`;
        modalBody.innerHTML += ` <p>TransactionTimeUtc : ${transaction.TransactionTimeUtc}</p>`;

        // Show the modal
        confirmationModal.show();
    }

    document.getElementById("submitTransactionButton").addEventListener("click", function () {

        const accountSelect = document.getElementById("accountSelect");
        const amountInput = document.getElementById("amount");
        const selectedAccount = accountSelect.options[accountSelect.selectedIndex].value;
        const amount = parseFloat(amountInput.value);
        const comment = document.getElementById("comment").value;

        // Create transaction object
        const transaction = {
            TransactionID: 0,
            TransactionType: 'D',
            AccountNumber: selectedAccount,
            DestinationAccountNumber: null,
            Amount: amount,
            Comment: comment,
            TransactionTimeUtc: new Date().toISOString(),
        };

        const route = '@ViewData["route"]';
        submitTransaction(transaction, route);

    });


</script>

