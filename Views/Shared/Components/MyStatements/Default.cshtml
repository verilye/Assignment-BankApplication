@model HomeViewDTO

<div id="myStatements" class="justify-content-center border">
    <div class="container p-5">
        <div class="mb-4  p-3">
            <h3>Select an account to view its transaction history</h3>
        </div>

        <div class="container d-flex col justify-content-start">
            <form>
                <select class="form-control" id="mystatements-accountSelect" required>
                    <option type="number" value="" disabled selected>Select an account</option>
                    @foreach (var item in Model.AccountViewModels)
                    {
                        <option value=@item.Account.AccountNumber>@item.Account.AccountNumber</option>
                    }
                </select>
            </form>
        </div>
    </div>
</div>

<div id="transactionHistory" class="d-block">

    @foreach (var accountViewModel in Model.AccountViewModels)
    {
        <div class="d-none" data-id='@accountViewModel.Account.AccountNumber' id='@accountViewModel.Account.AccountNumber'>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#ID</th>
                        <th scope="col">TransactionType</th>
                        <th scope="col">AccountNumber</th>
                        <th scope="col">DestinationAccountNumber</th>
                        <th scope="col">Amount</th>
                        <th scope="col">Comment</th>
                        <th scope="col">TransactionTimeUtc</th>
                    </tr>
                </thead>
                <tbody id="@accountViewModel.Account.AccountNumber">
                    @for (int i = 0; i < accountViewModel.Transactions.Count; i++)
                    {
                        <tr class="page-item">
                            <th scope="row">@accountViewModel.Transactions[i].TransactionID</th>
                            <td>@accountViewModel.Transactions[i].TransactionType</td>
                            <td>@accountViewModel.Transactions[i].AccountNumber</td>
                            <td>@accountViewModel.Transactions[i].DestinationAccountNumber</td>
                            <td>@accountViewModel.Transactions[i].Amount</td>
                            <td>@accountViewModel.Transactions[i].Comment</td>
                            <td>@accountViewModel.Transactions[i].TransactionTimeUtc</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="pagination">
                <button class="page-button prev-button"
                    onclick="changePage('@accountViewModel.Account.AccountNumber', -1)">&#8592;</button>
                
                <button class="page-button next-button"
                    onclick="changePage('@accountViewModel.Account.AccountNumber', 1)">&#8594;</button>
            </div>

        </div>
    }

</div>

<script>

    document.getElementById("mystatements-accountSelect").addEventListener("change", function (event) {
        const selectedValue = event.target.value;
        toggleAccount(selectedValue);
        changePage(selectedValue, 1);
    });

    function toggleAccount(AccountNumber) {
        const allAccounts = document.querySelectorAll('[data-id]');

        allAccounts.forEach(account => {
            if (account.getAttribute('data-id') === AccountNumber) {
                account.classList.remove("d-none");
                account.classList.add("d-block");
            } else {
                account.classList.remove("d-block");
                account.classList.add("d-none");
            }
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        const accounts = document.querySelectorAll('[data-id]');

        accounts.forEach(account => {
            const transactions = account.querySelectorAll('.page-item');
            let currentPage = 0;

            transactions.forEach((transaction, index) => {
                if (index < currentPage * 4 || index >= (currentPage + 1) * 4) {
                    transaction.style.display = 'none';
                }
            });

            const nextPageButton = account.querySelector('.next-button');
            const prevPageButton = account.querySelector('.prev-button');

            nextPageButton.addEventListener("click", function () {
                transactions.forEach((transaction, index) => {
                    transaction.style.display = 'none';
                });
                currentPage = (currentPage + 1) % Math.ceil(transactions.length / 4);
                for (let i = currentPage * 4; i < (currentPage + 1) * 4 && i < transactions.length; i++) {
                    transactions[i].style.display = 'table-row';
                }
                document.getElementById("current-page").textContent = currentPage + 1;
            });

            prevPageButton.addEventListener("click", function () {
                transactions.forEach((transaction, index) => {
                    transaction.style.display = 'none';
                });
                currentPage = (currentPage - 1 + Math.ceil(transactions.length / 4)) % Math.ceil(transactions.length / 4);
                for (let i = currentPage * 4; i < (currentPage + 1) * 4 && i < transactions.length; i++) {
                    transactions[i].style.display = 'table-row';
                }
                document.getElementById("current-page").textContent = currentPage + 1;
            });
        });
    });


</script>